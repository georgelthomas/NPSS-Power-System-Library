// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * April 26, 2018
// ****************************************************************************

//#include <InterpIncludes.ncp>
class Cable extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + " Determines power for the cable";
	
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	real R{
		value = .01;  IOstatus = "input";  //units = OHM;
	}
    
	real L{
		value = .0000796;  IOstatus = "input";  //units = H;
	}
    
    real length{
		value = 1.;  IOstatus = "input";  //units = M;
	}

	// Will add losses in future releases.
	real Loss_j {
		value = 0; IOstatus="output"; //units=W;
		description = "Cable Loss";
	}

	real Loss_r {
		value = 0; IOstatus="output"; //units=W;
		description = "Cable Loss";
	}

	real Mass {
		value=0; IOstatus="output"; //units=KG;
		description = "Mass output of the cable";
	}
	
	real SpecificAmperage {
	value = 170.; IOstatus="input"; //units=amp * m / kg;
	description = "Amps to Weight/length ratio for the cable";
	}

	ComplexNumber dV;
	ComplexNumber Z;
	ComplexNumber I;
	
	voltage_drop
	impedance
	mass
	cable_size
	paralleled
	ampacity
	params_test
	
	voltage
	current
	n_parallel
	drop_tolerance

	//------------------------------------------------------------
	//   ******* OPTION VARIABLE SETUP *******
	//------------------------------------------------------------

	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
		trigger=FALSE;
	}
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------	
	// FLUID PORTS

	// FUEL PORTS

	// BLEED PORTS

	// THERMAL PORTS

	// 	ELECTRICAL PORTS

	ElectricOutputPort EP_O {
		description = "Electric port";
	}
	string EPortRef;
	
	ElectricInputPort EP_I {
		description = "Electric Port";
	}

	//MECHANICAL PORTS

	// FLOW STATIONS 

	// SOCKETS

	// TABLES

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged( string name, any oldVal ) {
		if (name =="switchDes") {
			if (switchDes == DESIGN) {
				R.IOstatus = INPUT;
				L.IOstatus = INPUT;
				length.IOstatus = INPUT;
				SpecificAmperage.IOstatus = INPUT;
			}
			else if (switchDes == OFFDESIGN) {
				R.IOstatus = OUTPUT;
				L.IOstatus = OUTPUT;
				length.IOstatus = OUTPUT;
				SpecificAmperage.IOstatus = OUTPUT;
			}
		}
	} // end variableChanged()
	
	//------------------------------------------------------------
	//   ******* CABLE SIZING CALCULATIONS *******
	//------------------------------------------------------------
	
	//---------------------------------
	// AC Cable metrics function
	//---------------------------------
	void ac_cable_metrics()

		// Set cable parameters 
		// Cable sizes available
		string cable_sizes[] = {"18 Gauge","16 Gauge","14 Gauge","12 Gauge","10 Gauge",
			"8 Gauge","6 Gauge","4 Gauge","2 Gauge","1 Gauge","1/0","2/0","3/0",
			"4/0","262 kcmil","313 kcmil","373 kcmil","444 kcmil","535 kcmil",
			"646 kcmil","777 kcmil","1111 kcmil"};
		// Cable mass [kg/m]
		real cable_mass[] = {0.047621, 0.050598, 0.065479, 0.078873, 0.101195, 0.142864,
							 0.193461, 0.312514, 0.467283, 0.584848, 0.721759, 0.886945,
							 1.055107, 1.244104, 1.510485, 1.753056, 2.083428, 2.461421,
							 2.983766, 3.494206, 4.031433, 5.900565};
		// Cable reactance [ohms/m]
		real cable_reactances[] = {0.000213, 0.000203, 0.000187, 0.000174, 0.000164,
								   0.000157, 0.000148, 0.000128, 0.000121, 0.000118,
								   0.000115, 0.000112, 0.000112, 0.000108, 0.000112,
								   0.000108, 0.000105, 0.000102, 0.000102, 0.000102,
								   0.000098, 0.000098};
		// 400 Hz characteristics -> Resistance [ohms/m]
		real cable_ampacities_400[] = {17, 25, 40, 48, 62, 77, 103,136,179,204,236,
									   268,299,337,377,406,443,485,522,557,614,698};
		real cable_resistivities_400[] = {0.023617, 0.014807, 0.009336, 0.005866,
										  0.003704, 0.002278, 0.001433, 0.000975,
										  0.000606, 0.000490, 0.000402, 0.000333,
										  0.000280, 0.000241, 0.000216, 0.000195,
										  0.000177, 0.000167, 0.000156, 0.000143,
										  0.000129, 0.000108};
		// 680 Hz characteristics
		real cable_ampacities_680[] = {17, 25, 40, 48, 62, 77, 102,135,175,198,225,
									   252,276,306,340,363,395,432,466,498,550,627};
		real cable_resistivities_680[] = {0.023617, 0.014808, 0.009338, 0.005867,
									      0.003708, 0.002283, 0.001444, 0.000991,
										  0.000631, 0.000522, 0.000438, 0.000376,
										  0.000328, 0.000292, 0.000266, 0.000244,
										  0.000223, 0.000211, 0.000196, 0.000179,
										  0.000161, 0.000134};
		// 800 Hz characteristics
		real cable_ampacities_800[] = {17, 25, 40, 48, 62, 77, 102,135,173,195,221,
									   246,268,296,328,350,381,418,451,482,532,606};
		real cable_resistivities_800[] = {0.023617, 0.014809, 0.009339, 0.005868,
										  0.003710, 0.002288, 0.001449, 0.000999,
										  0.000645, 0.000538, 0.000457, 0.000396,
										  0.000347, 0.000312, 0.000285, 0.000262,
										  0.000239, 0.000225, 0.000209, 0.000192,
										  0.000173, 0.000143};
		
		// Combined characteristics
		real cable_ampacities[][] = {cable_ampacities_400;cable_ampacities_680;cable_ampacities_800};
		real cable_resistivities[][] = [cable_resistivities_400;cable_resistivities_680;cable_resistivities_800];
		
		// Perform error check on input data
		if (frequency ~= 400) {
			if (frequency ~= 680) {
				if frequency ~= 800
					msg = 'Incompatible frequency';
					error(msg)
				end
			}
		}
		
		// Determine number of lines
		if n_phases == 1
			lines = 2;
		elseif n_phases == 3
			lines = 3;
		elseif n_phases == 9
			lines = 9;
		end
		
		// Loop through searching for the cable
		params_test = 0;    // Error check (ie. no cable is found)
		mass = inf;
		impedance = 0;
		cable_size = "";
		optimal_wire = 0;
		paralleled = 0;
		conductors = 1;
		temp_current = 0;   // Temporary test current
		search_stop = 0;
		index = 1;
		
		if frequency == 400
			row = 1;
		elseif frequency == 680
			row = 2;
		elseif frequency == 800
			row = 3;
		end
		
		while search_stop == 0
			found = 0;
			while found==0
				if conductors > n_parallel
					search_stop = 1;
					found = 1;
					if optimal_wire == 0
						params_test = 1;
						mass = 0;
						impedance = 0;
						voltage_drop = 0;
						ampacity = 0;
						cable_size = "";
						fprintf('\nNo cables were found for these settings')
						fprintf('\n          LL voltage            : %5.0f',voltage)
						fprintf('\n          Current               : %5.0f', current)
						fprintf('\n          parallelled conductors: %5.0f',n_parallel)
						fprintf('\n          voltage drop tolerance: %5.2f',drop_tolerance)
						fprintf('\n')
					end 
				
				elseif index > size(cable_sizes,2)
					// Increase the conductors and start searching again
					conductors = conductors + 1;
					index = 1;
				else
					temp_current = cable_ampacities(row,index)*conductors;
					if temp_current > abs(current)
						// Exit loop once compatible cable setup is found
						found=1;

						// Check to see if cable setup is optimal
						// This is an AC bus, so there may or may not be send & return lines multiplied
						// by the number of paralleled conductors
						resistance = cable_resistivities(row,index); // [ohms/m]
						reactance = (frequency/60)*cable_reactances(index); // [ohms/m]
						impedance = (resistance+j*reactance)*length/conductors;   // [ohms]
						voltage_drop = abs(current)*abs(impedance);
						
						percent = 100*voltage_drop/voltage;
						
						if percent > drop_tolerance
							index = index + 1;
						elseif (lines*cable_mass(index)*conductors*length) < mass
							// If optimal weight, then re-initialize weight, index, and
							// number of paralleled conductors
							mass = lines*cable_mass(index)*conductors*length; // [lbs]
							optimal_wire = index;
							paralleled = conductors;
							index = size(cable_sizes,2)+1;  // Terminate loop
						else
							index = size(cable_sizes,2)+1;  // Terminate loop
						end
					else
						index = index+1;  // Terminate loop
					end
				end
			end
		end
		
		if optimal_wire ~= 0
			// Initialize rest of output
			cable_size = cable_sizes(optimal_wire);
			
			// Single wire resistance and reactance
			resistance = cable_resistivities(row,optimal_wire); // [ohms/m]
			reactance = (frequency/60)*cable_reactances(optimal_wire); // [ohms/m]
			
			// Bundled impedance
			impedance = (resistance+j*reactance)*length/paralleled;    // [ohms]
			voltage_drop = current*impedance;
			mass = lines*cable_mass(optimal_wire)*length*paralleled;
			ampacity = cable_ampacities(row,optimal_wire)*paralleled;
		end
	end

	%---------------------------------
	// DC Cable metrics function
	%---------------------------------
	void dc_cable_metrics()

		// Set cable parameters 
		// Cable sizes available
		cable_sizes = ["18 Gauge","16 Gauge","14 Gauge","12 Gauge","10 Gauge",
			"8 Gauge","6 Gauge","4 Gauge","2 Gauge","1 Gauge","1/0","2/0","3/0",
			"4/0","262 kcmil","313 kcmil","373 kcmil","444 kcmil","535 kcmil",
			"646 kcmil","777 kcmil","1111 kcmil"];
		// Cable resistance [ohms/m]
		cable_resistivities = (1/0.3048)*(1/1000)*[7.1986,4.5132,2.8454,1.7873,1.1281,0.6931,0.4350,
			0.2942,0.1799,0.1438,0.1150,0.0922,0.0737,0.0590,0.0494,0.0413,0.0347,
			0.0302,0.0258,0.0221,0.0192,0.0133];
		// Cable mass [kg/m]
		cable_mass = 0.453592*(1/0.3048)*(1/1000)*[32,34,44,53,68,96,130,210,314,393,485,596,709,836,1015,
			1178,1400,1654,2005,2348,2709,3965];
		// Cable ampacity [A]
		cable_ampacities = [17,25,40,48,62,77,103,137,181,208,243,281,321,376,
			436,487,553,630,709,783,881,1098];
		
		// Loop through searching for the cable
		params_test = 0;    // Error check (ie. no cable is found)
		mass = inf;
		resistance = 0;
		voltage_drop = 0;
		cable_size = "";
		optimal_wire = 0;
		paralleled = 0;
		conductors = 1;
		temp_current = 0;   // Temporary test current
		search_stop = 0;
		index = 1;
		while search_stop == 0
			found = 0;
			while found==0
				if conductors > n_parallel
					search_stop = 1;
					found = 1;
					if optimal_wire == 0
						params_test = 1;
						mass = 0;
						resistance = 0;
						cable_size = "";
						fprintf('\nNo cables were found for these settings')
						fprintf('\n          voltage               : %5.0f',voltage)
						fprintf('\n          current               : %5.0e',current*1000)
						fprintf('\n          parallelled conductors: %5.0f',n_parallel)
						fprintf('\n          voltage drop tolerance: %5.2f',drop_tolerance)
						fprintf('\n')
					end

				elseif index > size(cable_sizes,2)               
					// Increase the conductors and start searching again
					conductors = conductors + 1;
					index = 1;
				else
					temp_current = cable_ampacities(index)*conductors;
					if temp_current > current
						// Exit loop once compatible cable setup is found
						found=1;
						
						// Check to see if cable setup is optimal
						// This is a DC bus, so there will be send & return lines multiplied
						// by the number of paralleled conductors
						voltage_drop = current*(2*cable_resistivities(index)*length/conductors); // ohms
						 
						percent = 100*voltage_drop/voltage;
						
						if percent > drop_tolerance  
							index = index + 1;
						elseif (cable_mass(index)*conductors*2) < mass
							// If optimal weight, then re-initialize weight, index, and
							// number of paralleled conductors
							mass = cable_mass(index)*conductors*2;
							optimal_wire = index;
							paralleled = conductors;
							index = size(cable_sizes,2)+1;  // Terminate loop
						else
							index = size(cable_sizes,2)+1;  // Terminate loop
						end
					else
						index = index+1;  // Terminate loop
					end
				end
			end
		end
		// Initialize rest of output
		if optimal_wire ~= 0
			resistance = 2*cable_resistivities(optimal_wire)*length/paralleled;    // [ohms]
			cable_size = cable_sizes(optimal_wire);
			voltage_drop = current*(2*cable_resistivities(optimal_wire)*length/paralleled); // ohms
			mass = 2*cable_mass(optimal_wire)*length*paralleled;
		end   
	end


	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	
	void calculate() {
		
		//-------------------------------------------------------
		// calculate current from voltage drop
		//-------------------------------------------------------
		
		Z.setrj( R,  L*(2*PI*EP_I.frequency) );
		
		dV.copy( "EP_I.VLN" );
		dV.minus( "EP_O.VLN" );	
		I.copy( "dV" );
	    I.div( "Z" );

	    //----------------------------------------------------------
	    // set the conditions in the port
	    //-----------------------------------------------------------
		EP_O.frequency=EP_I.frequency;
		EP_O.setIVRMS( I.rRMS, I.jRMS, EP_O.V.rRMS, EP_O.V.jRMS ); 
		EP_I.setIVRMS( I.rRMS, I.jRMS, EP_I.V.rRMS, EP_I.V.jRMS ); 		
		
		Loss_r = EP_I.S.r - EP_O.S.r;
		Loss_j = EP_I.S.j - EP_O.S.j;
		
		//Loss = 3 * EP_I.I.mag * (EP_I.V.mag - Vload) / 1000.;
		if (switchDes=="DESIGN"){
			/***************************
			On-Design
			in on design, calculate the mass of the cable
			***************************/
			Mass=EP_I.I.mag/SpecificAmperage*length*3;
		}		
	}
}